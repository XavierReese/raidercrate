{"version":3,"sources":["logo.svg","Components/TaskOption/TaskOption.js","Components/TaskList/TaskList.js","Components/QnA/QnA.js","Components/TaskRenderer/TaskRenderer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","TaskOption","props","handleClick","bind","this","task","open","newTask","num","state","console","log","done","className","onClick","React","Component","TaskList","tasks","taskList","i","length","push","key","renderTaskList","QnA","input","onChange","componentDidMount","setState","current","e","target","value","changeCurrent","order","toUpperCase","info","answer","onComplete","divClass","question","TaskRenderer","currentTask","type","renderTitle","renderCurrentTask","App","taskNum","changeTask","editCurrent","completeTask","newCurrent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4741edbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './TaskOption.css'\n\nclass TaskOption extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    if (this.props.task.open) {\n      this.props.newTask(this.props.num)\n    }\n  }\n\n  render() {\n    let state = ''\n    let task = this.props.task\n\n    console.log(task)\n\n    if (task.open) {\n      state += 'openTask'\n      if (task.done) {\n        console.log('heyo we know you done')\n        state += ' completeTask'\n      }\n    } else {\n      state += 'closedTask'\n    }\n    return (\n      <button className={'task ' + state} onClick={this.handleClick}>\n        <li className=\"taskNum\">{this.props.num + 1}</li>\n      </button>\n    )\n  }\n}\n\nexport default TaskOption\n","import React from 'react'\nimport './TaskList.css'\nimport TaskOption from '../TaskOption/TaskOption'\n\nclass TaskList extends React.Component {\n  renderTaskList() {\n    let tasks = this.props.tasks\n    let taskList = []\n    for (let i = 0; i < tasks.length; i++) {\n      taskList.push(<TaskOption key={i} num={i} task={tasks[i]} newTask={this.props.newTask} />)\n    }\n\n    return taskList\n  }\n\n  render() {\n    return <div className=\"taskList\">{this.renderTaskList()}</div>\n  }\n}\n\nexport default TaskList\n","import React from 'react'\nimport './QnA.css'\n\nclass QnA extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      input: ''\n    }\n\n    this.onChange = this.onChange.bind(this)\n    this.componentDidMount = this.componentDidMount.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState({input: this.props.task.current})\n  }\n\n  onChange(e) {\n    let input = e.target.value\n    this.props.changeCurrent(this.props.task.order, input)\n    this.setState({input: input}, () => {\n      if (input.toUpperCase() === this.props.task.info.answer.toUpperCase()) {\n        if (!this.state.done) {\n          this.props.onComplete(this.props.task.order)\n        }\n        console.log('correct')\n        console.log(this.state)\n      }\n    })\n  }\n\n  render() {\n    let divClass = 'qnadiv'\n    if (this.state.done) {\n      divClass += ' completeQnAdiv'\n    }\n    return (\n      <div className={divClass}>\n        <p className=\"question\">{this.props.task.info.question}</p>\n        <input className=\"answer\" onChange={this.onChange} value={this.state.input} />\n      </div>\n    )\n  }\n}\n\nexport default QnA\n","import React from 'react'\nimport QnA from '../QnA/QnA'\nimport './TaskRenderer.css'\n\nclass TaskRenderer extends React.Component {\n  renderTitle() {\n    return <h1 className=\"qTitle\">{'Question ' + (this.props.currentTask + 1)}</h1>\n  }\n\n  renderCurrentTask() {\n    let task = this.props.tasks[this.props.currentTask]\n    let type = task.type\n    if (type === 'qa') {\n      return (\n        <QnA className=\"QnA\" task={task} onComplete={this.props.onComplete} changeCurrent={this.props.changeCurrent} />\n      )\n    }\n    // else if (type === 'qr') {\n    //   return (\n    //     <QnA className=\"qr\" task={task} onComplete\n    //   )\n    // }\n  }\n\n  render() {\n    return (\n      <div className=\"TaskDiv\">\n        {this.renderTitle()}\n        {this.renderCurrentTask()}\n      </div>\n    )\n  }\n}\n\nexport default TaskRenderer\n","import React from 'react'\nimport logo from '../../logo.svg'\nimport TaskList from '../TaskList/TaskList.js'\nimport TaskRenderer from '../TaskRenderer/TaskRenderer'\nimport './App.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      tasks: [\n        {\n          order: 0,\n          type: 'qa',\n          info: {\n            question: 'Testing',\n            answer: 'TESTING'\n          },\n          current: '',\n          open: true,\n          done: false\n        },\n        {\n          order: 1,\n          open: false,\n          done: false\n        },\n        {\n          order: 2,\n          open: false,\n          done: false\n        },\n        {\n          order: 3,\n          open: false,\n          done: false\n        }\n      ],\n      taskNum: 0\n    }\n\n    this.changeTask = this.changeTask.bind(this)\n    this.editCurrent = this.editCurrent.bind(this)\n    this.completeTask = this.completeTask.bind(this)\n  }\n\n  completeTask(taskNum) {\n    let tasks = this.state.tasks\n    tasks[taskNum].done = true\n    tasks[taskNum + 1].open = true\n    this.setState({tasks: tasks})\n  }\n\n  editCurrent(taskNum, newCurrent) {\n    let tasks = this.state.tasks\n    tasks[taskNum].current = newCurrent\n    this.setState({tasks: tasks})\n  }\n\n  changeTask(taskNum) {\n    this.setState({taskNum: taskNum})\n    console.log(this.state.tasks[taskNum])\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TaskList tasks={this.state.tasks} currentTask={this.state.taskNum} newTask={this.changeTask} />\n        <TaskRenderer\n          currentTask={this.state.taskNum}\n          tasks={this.state.tasks}\n          onComplete={this.completeTask}\n          changeCurrent={this.editCurrent}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}