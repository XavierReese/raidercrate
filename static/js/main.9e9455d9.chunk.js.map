{"version":3,"sources":["logo.png","Components/Navigation/NavSection/NavSection.js","Components/Navigation/NavBar/NavBar.js","Components/TaskArea/QnA/QnA.js","Components/TaskArea/writtenPage/writtenPage.js","Components/App/App.js","Components/TaskArea/TaskRenderer/TaskRenderer.js","Components/Bread/Breadcrumbs/Breadcrumbs.js","serviceWorker.js","index.js"],"names":["module","exports","NavSection","props","handleClick","bind","this","sectionInfo","open","updateSection","section","done","order","isCurrentSection","className","React","Component","NavBar","sections","taskList","i","length","push","key","currentSection","src","logo","alt","renderNavBar","QnA","onChange","e","input","target","value","console","log","changeCurrent","toUpperCase","task","info","answer","onComplete","divClass","question","placeholder","current","WrittenPage","page","h1Class","title","undefined","subtitle","button","onClick","para","App","state","furthestOpen","tasks","type","currentTask","ending","setSection","setTask","editCurrent","completeTask","checkSectionCompleteness","sectionNum","taskNum","setState","secNum","forEach","t","checkAllComplete","newCurrent","newSec","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e9455d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.44ea7f76.png\";","import React from 'react'\nimport './NavSection.css'\n\nclass NavSection extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    if (this.props.sectionInfo.open) {\n      this.props.updateSection()\n    }\n  }\n\n  render() {\n    let state = ''\n    let section = this.props.sectionInfo\n\n    if (section.done) {\n      state += ' completeTask'\n    }\n\n    if (typeof section.order === 'string') state += ' string'\n\n    if (this.props.isCurrentSection) state += ' current'\n\n    return <p className=\"sectionNum\">{section.order}</p>\n  }\n}\n\nexport default NavSection\n","import React from 'react'\nimport './NavBar.css'\nimport NavSection from '../NavSection/NavSection'\nimport logo from '../../../logo.png'\n\nclass NavBar extends React.Component {\n  renderNavBar() {\n    let sections = this.props.sections\n    let taskList = []\n    for (let i = 0; i < sections.length; i++) {\n      let className = 'navSection'\n\n      if (i === 0) {\n        className += ' intro'\n      } else if (i === 1) {\n        className += ' second'\n      }\n      if (i === sections.length - 2) {\n        className += ' secondToLast'\n      } else if (i === sections.length - 1) {\n        className += ' ending'\n      }\n\n      if (sections[i].done) {\n        className += ' done'\n      } else if (sections[i].open) {\n        className += ' open'\n      } else {\n        className += ' closed'\n      }\n\n      taskList.push(\n        <li className={className} key={i}>\n          <NavSection\n            sectionInfo={sections[i]}\n            updateSection={() => this.props.updateSection(i)}\n            isCurrentSection={i === this.props.currentSection}\n          />\n        </li>\n      )\n    }\n\n    // let ending = this.props.ending\n    //\n    // taskList.push(\n    //   <NavSection\n    //     key={'ending'}\n    //     sectionInfo={ending}\n    //     updateSection={() => this.props.updateSection(-1)}\n    //     isCurrentSection={-1 === this.props.currentSection}\n    //   />\n    // )\n\n    return taskList\n  }\n\n  render() {\n    return (\n      <div className=\"header\">\n        <img src={logo} alt=\"Raider Crate Logo\" />\n        <nav>\n          <ul>{this.renderNavBar()}</ul>\n        </nav>\n      </div>\n    )\n  }\n}\n\nexport default NavBar\n","import React from 'react'\nimport './QnA.css'\n\nclass QnA extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange(e) {\n    let input = e.target.value\n    console.log('here')\n    this.props.changeCurrent(input)\n    if (input.toUpperCase() === this.props.task.info.answer.toUpperCase()) {\n      if (!this.props.task.done) {\n        this.props.onComplete()\n      }\n    }\n  }\n\n  render() {\n    let divClass = 'qnadiv'\n    if (this.props.task.done) {\n      console.log('should be green')\n      divClass += ' completeQnAdiv'\n    }\n    return (\n      <div className={divClass}>\n        <h1>{'Question ' + this.props.task.order}</h1>\n        <p className=\"question\">{this.props.task.info.question}</p>\n        <input\n          placeholder=\"Enter Your Answer Here\"\n          className=\"answer\"\n          onChange={this.onChange}\n          value={this.props.task.current}\n        />\n      </div>\n    )\n  }\n}\n\nexport default QnA\n","import React from 'react'\nimport './WrittenPage.css'\n\nclass WrittenPage extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    this.props.onComplete()\n  }\n\n  render() {\n    let info = this.props.page.info\n    let h1Class = info.title === 'Congratulations!' ? 'congrats' : undefined\n    console.log(h1Class)\n    let subtitle = info.subtitle ? <h2 className=\"subtitle\">{info.subtitle}</h2> : undefined\n    let button = info.button ? (\n      <button className=\"button\" onClick={this.handleClick}>\n        {info.button}\n      </button>\n    ) : (\n      undefined\n    )\n    return (\n      <div className=\"page\">\n        <h1 className={h1Class}>{info.title}</h1>\n        {subtitle}\n        <p>{info.para}</p>\n        {button}\n      </div>\n    )\n  }\n}\n\nexport default WrittenPage\n","import React from 'react'\nimport NavBar from '../Navigation/NavBar/NavBar.js'\nimport TaskRenderer from '../TaskArea/TaskRenderer/TaskRenderer'\nimport Breadcrumbs from '../Bread/Breadcrumbs/Breadcrumbs'\nimport './App.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      sections: [\n        {\n          order: 'INTRO',\n          open: true,\n          done: false,\n          furthestOpen: 0,\n          tasks: [\n            {\n              order: 'INTRO',\n              type: 'p',\n              info: {\n                title: 'INSTRUCTIONS',\n                subtitle: 'Read Carefully!',\n                para:\n                  'instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions',\n                button: \"I'm Ready!\"\n              },\n              open: true,\n              done: false\n            },\n            {\n              order: 1,\n              type: 'qa',\n              info: {\n                question: 'Testing testing testing testing testing testing testing testing testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 2,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 3,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 4,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            }\n          ]\n        },\n        {\n          order: 1,\n          open: true,\n          done: false,\n          furthestOpen: 0,\n          tasks: [\n            {\n              order: 'INTRO',\n              type: 'p',\n              info: {\n                title: 'INSTRUCTIONS',\n                subtitle: 'Read Carefully!',\n                para:\n                  'instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions',\n                button: \"I'm Ready!\"\n              },\n              open: true,\n              done: false\n            },\n            {\n              order: 1,\n              type: 'qa',\n              info: {\n                question: 'Testing testing testing testing testing testing testing testing testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 2,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 3,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 4,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            }\n          ]\n        },\n        {\n          order: 2,\n          open: true,\n          done: false,\n          furthestOpen: 0,\n          tasks: [\n            {\n              order: 'INTRO',\n              type: 'p',\n              info: {\n                title: 'INSTRUCTIONS',\n                subtitle: 'Read Carefully!',\n                para:\n                  'instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions',\n                button: \"I'm Ready!\"\n              },\n              open: true,\n              done: false\n            },\n            {\n              order: 1,\n              type: 'qa',\n              info: {\n                question: 'Testing testing testing testing testing testing testing testing testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 2,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 3,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 4,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            }\n          ]\n        },\n        {\n          order: 3,\n          open: true,\n          done: false,\n          furthestOpen: 0,\n          tasks: [\n            {\n              order: 'INTRO',\n              type: 'p',\n              info: {\n                title: 'INSTRUCTIONS',\n                subtitle: 'Read Carefully!',\n                para:\n                  'instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions',\n                button: \"I'm Ready!\"\n              },\n              open: true,\n              done: false\n            },\n            {\n              order: 1,\n              type: 'qa',\n              info: {\n                question: 'Testing testing testing testing testing testing testing testing testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 2,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 3,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            },\n            {\n              order: 4,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            }\n          ]\n        },\n        {\n          order: 4,\n          open: true,\n          done: false,\n          furthestOpen: 0,\n          tasks: [\n            {\n              order: 4,\n              type: 'qa',\n              info: {\n                question: 'Testing',\n                answer: 'TESTING'\n              },\n              current: '',\n              open: false,\n              done: false\n            }\n          ]\n        },\n        {\n          order: 'END',\n          open: false,\n          done: false,\n          furthestOpen: 0,\n          tasks: [\n            {\n              order: 'END',\n              type: 'p',\n              info: {\n                title: 'Congratulations!',\n                subtitle: 'You finished the hunt!',\n                para:\n                  'instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions'\n              },\n              open: true\n            }\n          ]\n        }\n      ],\n      currentSection: 0,\n      currentTask: 0,\n      ending: {\n        order: 'END',\n        type: 'p',\n        info: {\n          title: 'Congratulations!',\n          subtitle: 'You finished the hunt!',\n          para:\n            'instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions instructions'\n        },\n        open: false\n      }\n    }\n\n    this.setSection = this.setSection.bind(this)\n    this.setTask = this.setTask.bind(this)\n    this.editCurrent = this.editCurrent.bind(this)\n    this.completeTask = this.completeTask.bind(this)\n    this.checkSectionCompleteness = this.checkSectionCompleteness.bind(this)\n  }\n\n  completeTask(sectionNum, taskNum) {\n    let sections = this.state.sections\n    let tasks = sections[sectionNum].tasks\n    tasks[taskNum].done = true\n    if (tasks.length !== taskNum + 1) {\n      tasks[taskNum + 1].open = true\n      sections[sectionNum].furthestOpen = taskNum + 1\n    }\n    sections[sectionNum].tasks = tasks\n    this.setState({sections: sections}, this.checkSectionCompleteness(sectionNum))\n  }\n\n  checkSectionCompleteness(secNum) {\n    let sections = this.state.sections\n    let section = sections[secNum]\n    let done = true\n    section.tasks.forEach(t => {\n      if (!t.done) done = false\n    })\n    if (done) {\n      section.done = true\n      sections[secNum] = section\n      console.log('DONE! ' + secNum)\n      this.setState({sections: section})\n      this.checkAllComplete()\n    }\n  }\n\n  checkAllComplete() {\n    let sections = this.state.sections\n    for (let i = 0; i < sections.length - 1; i++) {\n      if (!sections[i].done) return\n    }\n    sections[sections.length - 1].open = true\n    this.setState({sections: sections})\n  }\n\n  editCurrent(sectionNum, taskNum, newCurrent) {\n    let sections = this.state.sections\n    let tasks = sections[sectionNum].tasks\n    tasks[taskNum].current = newCurrent\n    sections[sectionNum].tasks = tasks\n    this.setState({sections: sections})\n  }\n\n  setSection(sectionNum) {\n    let newSec = this.state.sections[sectionNum] ? this.state.sections[sectionNum] : this.state.ending\n    let currentTask = newSec.furthestOpen ? newSec.furthestOpen : 0\n    if (newSec.open) this.setState({currentSection: sectionNum, currentTask: currentTask})\n  }\n\n  setTask(taskNum) {\n    this.setState({currentTask: taskNum})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar\n          sections={this.state.sections}\n          currentSection={this.state.currentSection}\n          updateSection={this.setSection}\n        />\n        {/*\n        <div className=\"notNav\">\n          <Breadcrumbs section={this.state.sections[this.state.currentSection]} updateTask={this.setTask} />\n        </div>\n        <TaskRenderer\n          currentSection={this.state.currentSection}\n          currentTask={this.state.currentTask}\n          tasks={this.state.sections[this.state.currentSection].tasks}\n          onComplete={this.completeTask}\n          changeCurrent={this.editCurrent}\n        />\n        */}\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport QnA from '../QnA/QnA'\nimport WrittenPage from '../writtenPage/writtenPage'\nimport './TaskRenderer.css'\n\nclass TaskRenderer extends React.Component {\n  renderCurrentTask() {\n    let i = this.props.currentTask\n    let task = this.props.tasks[i]\n    let type = task.type\n    if (type === 'qa') {\n      return (\n        <QnA\n          className=\"QnA\"\n          task={task}\n          onComplete={() => this.props.onComplete(this.props.currentSection, i)}\n          changeCurrent={input => this.props.changeCurrent(this.props.currentSection, i, input)}\n        />\n      )\n    } else if (type === 'p') {\n      return (\n        <WrittenPage\n          className=\"written\"\n          page={task}\n          onComplete={() => {\n            this.props.onComplete(this.props.currentSection, i)\n          }}\n        />\n      )\n    }\n  }\n\n  render() {\n    return <div className=\"TaskDiv\">{this.renderCurrentTask()}</div>\n  }\n}\n\nexport default TaskRenderer\n","import React from 'react'\nimport './Breadcrumbs.css'\n\nclass Breadcrumbs extends React.Component {\n  handleClick(taskNum, open) {\n    if (open) this.props.updateTask(taskNum)\n  }\n\n  renderBreadcrumbs() {\n    let section = this.props.section\n    let tasks = section.tasks\n    let result = []\n    for (let i = 0; i < tasks.length; i++) {\n      result.push(\n        <li key={i} onClick={() => this.handleClick(i, tasks[i].open)}>\n          {tasks[i].order}\n        </li>\n      )\n    }\n\n    return result\n  }\n\n  render() {\n    return <ul className=\"breadcrumbs\">{this.renderBreadcrumbs()}</ul>\n  }\n}\n\nexport default Breadcrumbs\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}